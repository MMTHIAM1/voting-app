version: '3.8'

services:
  vote:
    build: ./vote
    container_name: vote_service
    # Assurez-vous d'avoir bien commenté ou retiré la ligne 'ports' si Nginx gère l'exposition
    # ports:
    #   - "5000:80"
    networks:
      - frontend
      - backend
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    healthcheck: # <-- AJOUTEZ CE BLOC
      test: ["CMD", "curl", "-f", "http://localhost:80"] # Adaptez le port si votre application 'vote' écoute sur un autre port interne
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s # Donne un peu de temps à l'application pour démarrer

  result:
    build: ./result
    container_name: result_service
    # Assurez-vous d'avoir bien commenté ou retiré la ligne 'ports' si Nginx gère l'exposition
    # ports:
    #   - "5001:80"
    networks:
      - frontend
      - backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    healthcheck: # <-- AJOUTEZ CE BLOC
      test: ["CMD", "curl", "-f", "http://localhost:80"] # Adaptez le port si votre application 'result' écoute sur un autre port interne
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s # Donne un peu de temps à l'application pour démarrer

  worker:
    build: ./worker
    container_name: worker_service
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - ./.env
    # Optionnel: Vous pourriez aussi ajouter un healthcheck ici pour le worker
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/health"] # Exemple, adaptez au port et au chemin de votre worker
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 10s

  redis:
    image: redis:latest
    container_name: redis_cache
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  db:
    image: postgres:15-alpine
    container_name: votes_db
    # ports: # <-- Bien de l'avoir commenté pour la sécurité
    #   - "5432:5432"
    networks:
      - backend
    volumes:
      - db-vote:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:latest
    container_name: voting_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      vote:
        condition: service_healthy # Cette ligne est maintenant valide
      result:
        condition: service_healthy # Cette ligne est maintenant valide
    networks:
      - frontend

volumes:
  db-vote:

networks:
  frontend:
  backend:
